// nouns
POS#NN : (lambda $P:<E0,E1> (lambda $0:E0 ($P $0)))
POS#NN : (lambda $P:<<E0,t>,E1> (lambda $0:<E0,t> ($P $0)))
POS#NN : (lambda $P:<E1,<E2,t>> (lambda $0:E1 (lambda $1:E2 ($P $0 $1))))
POS#NN : (lambda $P:<E1,<E2,t>> (lambda $0:E2 (lambda $1:E1 ($P $1 $0))))
POS#NN : (lambda $P0:<E,t> (lambda $P1:<E,<E1,t>> (lambda $0:E1 (lambda $1:E (and:<t*,t> ($P0 $1) ($P1 $1 $0))))))
POS#NN : (lambda $P:<E2,<E1,t>> (lambda $0:<E2,t> (lambda $3:<E2,t> (lambda $1:E1 (exists:<<E2,t>,t> (lambda $2:E2 (and:<t*,t> ($0 $2) ($3 $2) ($P $2 $1))))))))
POS#NN : (lambda $P:<E2,<E1,t>> (lambda $0:<E2,t> (lambda $1:E1 (exists:<<E2,t>,t> (lambda $2:E2 (and:<t*,t> ($0 $2) ($P $2 $1)))))))


// nouns, plural
POS#NNS : (lambda $P:<E0,E1> (lambda $0:E0 ($P $0)))
POS#NNS : (lambda $P:<E2,<E1,t>> (lambda $0:E1 (lambda $1:E2 ($P $1 $0))))
POS#NNS : (lambda $P:<E1,<E2,t>> (lambda $0:E1 (lambda $1:E2 ($P $0 $1))))
POS#NNS : (lambda $P0:<E,<E1,t>> (lambda $P1:<E,t> (lambda $0:E1 (lambda $1:E (and:<t*,t> ($P0 $1 $0) ($P1 $1))))))

// active verb
POS#VB : (lambda $P:<E1,<E0,t>> (lambda $0:E0 (lambda $1:E1 ($P $1 $0))))

// passive verb
POS#VB : (lambda $P:<E0,<E1,t>> (lambda $0:E0 (lambda $1:E1 ($P $0 $1))))

// bordering state
POS#VB : (lambda $P:<E,<E1,t>> (lambda $0:<E1,t> (lambda $1:E1 (lambda $2:E (and:<t*,t> ($P $2 $1) ($0 $1))))))

//border state that ...
POS#VB : (lambda $P:<E,<E1,t>> (lambda $0:<<E,<E1,t>>,<E,t>> (lambda $1:<E,t> (lambda $2:E (and:<t*,t> ($1 $2) ($0 $P $2))))))

// preposition
POS#IN : (lambda $P:<E1,<E0,t>> (lambda $0:E0 (lambda $1:E1 ($P $1 $0))))
POS#IN : (lambda $P:<E0,<E1,t>> (lambda $0:E0 (lambda $1:E1 ($P $0 $1))))
//in which state is...
POS#IN : (lambda $P:<E0,<E1,t>> (lambda $1:<E1,t> (lambda $2:E0 (lambda $3:E1 (and:<t*,t> ($1 $3) ($P $2 $3))))))
// of states that ...
POS#IN : (lambda $P:<E,<E1,t>> (lambda $0:<<E,<E1,t>>,<E,t>> (lambda $1:<E,t> (lambda $2:E (and:<t*,t> ($1 $2) ($0 $P $2))))))
// density of each state where density is of <lo,<i,t>>
POS#IN : (lambda $0:<E,<E1,t>> (lambda $1:<E,t> (lambda $2:E1 (exists:<<E,t>,t> (lambda $3:E (and:<t*,t> ($1 $3) ($0 $3 $2)))))))
POS#IN : (lambda $0:<E,<E1,t>> (lambda $1:<E1,t> (lambda $2:E (exists:<<E1,t>,t> (lambda $3:E1 (and:<t*,t> ($1 $3) ($0 $2 $3)))))))
// highest points of states bordering ...
POS#IN : (lambda $P:<E1,<E,t>> (lambda $0:<E1,t> (lambda $1:<E,t> (lambda $2:E1 (and:<t*,t> ($0 $2) (exists:<<E,t>,t> (lambda $3:E (and:<t*,t> ($1 $3) ($P $2 $3)))))))))

// adjective
POS#JJ : (lambda $P:<E,E1> (lambda $0:E ($P $0)))
POS#JJ : (lambda $P:<E,<E1,t>> (lambda $1:E1 (lambda $0:E ($P $0 $1))))
// surrounding
POS#JJ : (lambda $P:<E,<E1,t>> (lambda $0:<E1,t> (lambda $1:E1 (lambda $2:E (and:<t*,t> ($P $2 $1) ($0 $1))))))

// adjective, superlative
// max
POS#JJS : (lambda $P:<E,i> (lambda $0:<E,t> (argmax:<<E,t>,<<E,i>,E>> $0 $P)))
POS#JJS : (lambda $0:<E,i> (lambda $1:<E,t> (argmax:<<E,t>,<<E,i>,E>> $1 $0)))
POS#JJS : (lambda $0:<E,t> (lambda $1:<E,i> (argmax:<<E,t>,<<E,i>,E>> $0 $1)))
POS#JJS : (lambda $0:<E,i> (lambda $1:<E,t> (lambda $2:<E,t> (argmax:<<E,t>,<<E,i>,E>> (lambda $3:E (and:<t*,t> ($1 $3) ($2 $3))) $0))))
POS#JJS : (lambda $P:<E,i> (lambda $1:<E,t> (lambda $2:<E,t> (argmax:<<E,t>,<<E,i>,E>> (lambda $3:E (and:<t*,t> ($1 $3) ($2 $3))) $P))))
POS#JJS : (lambda $1:<E1,<E0,t>> (lambda $0:<E0,t> (lambda $2:<E1,t> (argmax:<<E0,t>,<<E0,i>,E0>> $0 (lambda $3:E0 (count:<<E1,t>,i> (lambda $4:E1 (and:<t*,t> ($2 $4) ($1 $4 $3)))))))))
// min
POS#JJS : (lambda $P:<E,i> (lambda $0:<E,t> (argmin:<<E,t>,<<E,i>,E>> $0 $P)))
POS#JJS : (lambda $0:<E,i> (lambda $1:<E,t> (argmin:<<E,t>,<<E,i>,E>> $1 $0)))
POS#JJS : (lambda $0:<E,i> (lambda $1:<E,t> (lambda $2:<E,t> (argmin:<<E,t>,<<E,i>,E>> (lambda $3:E (and:<t*,t> ($1 $3) ($2 $3))) $0))))
POS#JJS : (lambda $P:<E,i> (lambda $1:<E,t> (lambda $2:<E,t> (argmin:<<E,t>,<<E,i>,E>> (lambda $3:E (and:<t*,t> ($1 $3) ($2 $3))) $P))))
POS#JJS : (lambda $1:<E1,<E0,t>> (lambda $0:<E0,t> (lambda $2:<E1,t> (argmin:<<E0,t>,<<E0,i>,E0>> $0 (lambda $3:E0 (count:<<E1,t>,i> (lambda $4:E1 (and:<t*,t> ($2 $4) ($1 $4 $3)))))))))
POS#JJS : (lambda $0:<E,t> (lambda $1:<E,i> (argmin:<<E,t>,<<E,i>,E>> $0 $1)))

//adjective, comparative
POS#JJR : (lambda $P:<E,i> (lambda $0:E (lambda $1:E (>:<i,<i,t>> ($P $1) ($P $0)))))


// adverb, superlative
// max only
POS#RBS : (lambda $0:<E,i> (lambda $1:<E,t> (argmax:<<E,t>,<<E,i>,E>> $1 $0)))
// has the most major cities
POS#RBS : (lambda $1:<E1,<E0,t>> (lambda $0:<E0,t> (lambda $2:<E1,t> (argmax:<<E0,t>,<<E0,i>,E0>> $0 (lambda $3:E0 (count:<<E1,t>,i> (lambda $4:E1 (and:<t*,t> ($2 $4) ($1 $4 $3)))))))))

// determiner
// the ...
POS#DT : (lambda $0:<E,t> (the:<<E,t>,E> $0))

// to, to some place
POS#TO : (lambda $P:<E2,<E1,t>> (lambda $0:E1 (lambda $1:E2 ($P $1 $0))))
POS#TO : (lambda $P:<E1,<E2,t>> (lambda $0:E1 (lambda $1:E2 ($P $0 $1))))
// place1 to place2
POS#TO : (lambda $P1:<E2,<E1,t>> (lambda $P2:<E2,<E1,t>> (lambda $0:E1 (lambda $1:E1 (lambda $2:E2 (and:<t*,t> ($P1 $2 $0) ($P2 $2 $1)))))))


// wh-words
how many : (lambda $0:<E,t> (lambda $1:<E,t> (count:<<E,t>,i> (lambda $2:E (and:<t*,t> ($0 $2) ($1 $2))))))
how many : (lambda $0:<E,t> (count:<<E,t>,i> $0))
// skip
//exact place: where is new york city
where : (lambda $P:<E,<E1,t>> (lambda $0:E (lambda $1:E1 ($P $0 $1))))
// inexact places: where are mountains
where : (lambda $P:<E,<E,t>> (lambda $0:<E,t> (lambda $1:E (exists:<<E,t>,t> (lambda $2:E (and:<t*,t> ($0 $2) ($P $2 $1)))))))

number : (lambda $0:<E,t> (count:<<E,t>,i>  $0))


//determinners
// clause, border states that
that : (lambda $0:<E,t> (lambda $1:<E,t> (lambda $2:<E1,<E,t>> (lambda $3:E1 (exists:<<E,t>,t> (lambda $4:E (and:<t*,t> ($0 $4) ($1 $4) ($2 $3 $4))))))))
which : (lambda $0:<E,t> (lambda $1:<E,t> (lambda $2:<E1,<E,t>> (lambda $3:E1 (exists:<<E,t>,t> (lambda $4:E (and:<t*,t> ($0 $4) ($1 $4) ($2 $3 $4))))))))

// copula
are : (lambda $0:<E,<E1,t>> (lambda $1:E (exists:<<E1,t>,t> (lambda $2:E1 ($0 $1 $2)))))

have : (lambda $P:<E,<E1,t>> (lambda $0:<E,t> (lambda $1:E1 (exists:<<E,t>,t> (lambda $2:E (and:<t*,t> ($0 $2) ($P $2 $1)))))))
have : (lambda $P:<E1,<E,t>> (lambda $0:<E,t> (lambda $1:<E1,t> (lambda $2:E (and:<t*,t> ($0 $2) (exists:<<E1,t>,t> (lambda $3:E1 (and:<t*,t> ($1 $3) ($P $3 $2)))))))))
has : (lambda $P:<E1,<E,t>> (lambda $0:<E,t> (lambda $1:<E1,t> (lambda $2:E (and:<t*,t> ($0 $2) (exists:<<E1,t>,t> (lambda $3:E1 (and:<t*,t> ($1 $3) ($P $3 $2)))))))))
has : (lambda $P:<E1,<E,t>> (lambda $0:<E,t> (lambda $1:E1 (lambda $2:E (and:<t*,t> ($0 $2) ($P $1 $2))))))
has : (lambda $P:<E1,<E2,t>> (lambda $0:E1 (lambda $1:E2 ($P $0 $1))))

// negation
not : (lambda $0:<E,t> (lambda $1:E (not:<t,t> ($0 $1))))
dont : (lambda $0:<E,t> (lambda $1:E (not:<t,t> ($0 $1))))
doesnt : (lambda $0:<E,t> (lambda $1:E (not:<t,t> ($0 $1))))
do not : (lambda $0:<E,t> (lambda $1:<E,t> (lambda $2:E (and:<t*,t> ($0 $2) (not:<t,t> ($1 $2))))))
no : (lambda $0:<E,t> (lambda $1:E (not:<t,t> ($0 $1))))
// means have no
no : (lambda $0:<E,<E1,t>> (lambda $1:E (not:<t,t> (exists:<<E1,t>,t> (lambda $2:E1 ($0 $2 $1))))))
excluding : (lambda $0:E (lambda $1:E (not:<t,t> (equals:<E,<E,t>> $1 $0))))

// area of all of the states combined
combined : (lambda $0:<E,t> (lambda $1:<E,i> (sum:<<E,t>,<<E,i>,i>> $0 $1)))
combined : (lambda $1:<E,i> (lambda $0:<E,t> (sum:<<E,t>,<<E,i>,i>> $0 $1)))
// total population of ...
total : (lambda $0:<E,i> (lambda $1:<E,t> (sum:<<E,t>,<<E,i>,i>> $1 $0)))

// at least one
at least one : (lambda $0:<E,t> (lambda $1:<E,<E1,t>> (lambda $2:E1 (>:<i,<i,t>> (count:<<E,t>,i> (lambda $3:E (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i))))

